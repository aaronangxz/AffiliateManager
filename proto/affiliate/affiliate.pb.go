// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: affiliate.proto

package affiliate

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GlobalErrorCode int32

const (
	GlobalErrorCode_SUCCESS              GlobalErrorCode = 0
	GlobalErrorCode_ERROR_FAIL           GlobalErrorCode = 1000
	GlobalErrorCode_ERROR_INVALID_PARAMS GlobalErrorCode = 1002
	GlobalErrorCode_ERROR_DATABASE       GlobalErrorCode = 1003
)

// Enum value maps for GlobalErrorCode.
var (
	GlobalErrorCode_name = map[int32]string{
		0:    "SUCCESS",
		1000: "ERROR_FAIL",
		1002: "ERROR_INVALID_PARAMS",
		1003: "ERROR_DATABASE",
	}
	GlobalErrorCode_value = map[string]int32{
		"SUCCESS":              0,
		"ERROR_FAIL":           1000,
		"ERROR_INVALID_PARAMS": 1002,
		"ERROR_DATABASE":       1003,
	}
)

func (x GlobalErrorCode) Enum() *GlobalErrorCode {
	p := new(GlobalErrorCode)
	*p = x
	return p
}

func (x GlobalErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GlobalErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_affiliate_proto_enumTypes[0].Descriptor()
}

func (GlobalErrorCode) Type() protoreflect.EnumType {
	return &file_affiliate_proto_enumTypes[0]
}

func (x GlobalErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GlobalErrorCode.Descriptor instead.
func (GlobalErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{0}
}

type UserRole int32

const (
	UserRole_ROLE_AFFILIATE UserRole = 0
	UserRole_ROLE_ADMIN     UserRole = 1
	UserRole_ROLE_DEV       UserRole = 2
)

// Enum value maps for UserRole.
var (
	UserRole_name = map[int32]string{
		0: "ROLE_AFFILIATE",
		1: "ROLE_ADMIN",
		2: "ROLE_DEV",
	}
	UserRole_value = map[string]int32{
		"ROLE_AFFILIATE": 0,
		"ROLE_ADMIN":     1,
		"ROLE_DEV":       2,
	}
)

func (x UserRole) Enum() *UserRole {
	p := new(UserRole)
	*p = x
	return p
}

func (x UserRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserRole) Descriptor() protoreflect.EnumDescriptor {
	return file_affiliate_proto_enumTypes[1].Descriptor()
}

func (UserRole) Type() protoreflect.EnumType {
	return &file_affiliate_proto_enumTypes[1]
}

func (x UserRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserRole.Descriptor instead.
func (UserRole) EnumDescriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{1}
}

type AffiliateType int32

const (
	AffiliateType_AFFILIATE_TYPE_ACCOMMODATION AffiliateType = 0
	AffiliateType_AFFILIATE_TYPE_RIDE_HAILING  AffiliateType = 1
)

// Enum value maps for AffiliateType.
var (
	AffiliateType_name = map[int32]string{
		0: "AFFILIATE_TYPE_ACCOMMODATION",
		1: "AFFILIATE_TYPE_RIDE_HAILING",
	}
	AffiliateType_value = map[string]int32{
		"AFFILIATE_TYPE_ACCOMMODATION": 0,
		"AFFILIATE_TYPE_RIDE_HAILING":  1,
	}
)

func (x AffiliateType) Enum() *AffiliateType {
	p := new(AffiliateType)
	*p = x
	return p
}

func (x AffiliateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AffiliateType) Descriptor() protoreflect.EnumDescriptor {
	return file_affiliate_proto_enumTypes[2].Descriptor()
}

func (AffiliateType) Type() protoreflect.EnumType {
	return &file_affiliate_proto_enumTypes[2]
}

func (x AffiliateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AffiliateType.Descriptor instead.
func (AffiliateType) EnumDescriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{2}
}

type ReferralStatus int32

const (
	ReferralStatus_REFERRAL_STATUS_SUCCESS   ReferralStatus = 0
	ReferralStatus_REFERRAL_STATUS_PENDING   ReferralStatus = 1
	ReferralStatus_REFERRAL_STATUS_FAILED    ReferralStatus = 2
	ReferralStatus_REFERRAL_STATUS_CANCELLED ReferralStatus = 3
)

// Enum value maps for ReferralStatus.
var (
	ReferralStatus_name = map[int32]string{
		0: "REFERRAL_STATUS_SUCCESS",
		1: "REFERRAL_STATUS_PENDING",
		2: "REFERRAL_STATUS_FAILED",
		3: "REFERRAL_STATUS_CANCELLED",
	}
	ReferralStatus_value = map[string]int32{
		"REFERRAL_STATUS_SUCCESS":   0,
		"REFERRAL_STATUS_PENDING":   1,
		"REFERRAL_STATUS_FAILED":    2,
		"REFERRAL_STATUS_CANCELLED": 3,
	}
)

func (x ReferralStatus) Enum() *ReferralStatus {
	p := new(ReferralStatus)
	*p = x
	return p
}

func (x ReferralStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferralStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_affiliate_proto_enumTypes[3].Descriptor()
}

func (ReferralStatus) Type() protoreflect.EnumType {
	return &file_affiliate_proto_enumTypes[3]
}

func (x ReferralStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferralStatus.Descriptor instead.
func (ReferralStatus) EnumDescriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{3}
}

type BookingStatus int32

const (
	BookingStatus_BOOKING_STATUS_SUCCESS   BookingStatus = 0
	BookingStatus_BOOKING_STATUS_PENDING   BookingStatus = 1
	BookingStatus_BOOKING_STATUS_FAILED    BookingStatus = 2
	BookingStatus_BOOKING_STATUS_CANCELLED BookingStatus = 3
)

// Enum value maps for BookingStatus.
var (
	BookingStatus_name = map[int32]string{
		0: "BOOKING_STATUS_SUCCESS",
		1: "BOOKING_STATUS_PENDING",
		2: "BOOKING_STATUS_FAILED",
		3: "BOOKING_STATUS_CANCELLED",
	}
	BookingStatus_value = map[string]int32{
		"BOOKING_STATUS_SUCCESS":   0,
		"BOOKING_STATUS_PENDING":   1,
		"BOOKING_STATUS_FAILED":    2,
		"BOOKING_STATUS_CANCELLED": 3,
	}
)

func (x BookingStatus) Enum() *BookingStatus {
	p := new(BookingStatus)
	*p = x
	return p
}

func (x BookingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_affiliate_proto_enumTypes[4].Descriptor()
}

func (BookingStatus) Type() protoreflect.EnumType {
	return &file_affiliate_proto_enumTypes[4]
}

func (x BookingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookingStatus.Descriptor instead.
func (BookingStatus) EnumDescriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{4}
}

type PaymentStatus int32

const (
	PaymentStatus_PAYMENT_STATUS_SUCCESS  PaymentStatus = 0
	PaymentStatus_PAYMENT_STATUS_PENDING  PaymentStatus = 1
	PaymentStatus_PAYMENT_STATUS_FAILED   PaymentStatus = 2
	PaymentStatus_PAYMENT_STATUS_REFUNDED PaymentStatus = 3
)

// Enum value maps for PaymentStatus.
var (
	PaymentStatus_name = map[int32]string{
		0: "PAYMENT_STATUS_SUCCESS",
		1: "PAYMENT_STATUS_PENDING",
		2: "PAYMENT_STATUS_FAILED",
		3: "PAYMENT_STATUS_REFUNDED",
	}
	PaymentStatus_value = map[string]int32{
		"PAYMENT_STATUS_SUCCESS":  0,
		"PAYMENT_STATUS_PENDING":  1,
		"PAYMENT_STATUS_FAILED":   2,
		"PAYMENT_STATUS_REFUNDED": 3,
	}
)

func (x PaymentStatus) Enum() *PaymentStatus {
	p := new(PaymentStatus)
	*p = x
	return p
}

func (x PaymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_affiliate_proto_enumTypes[5].Descriptor()
}

func (PaymentStatus) Type() protoreflect.EnumType {
	return &file_affiliate_proto_enumTypes[5]
}

func (x PaymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentStatus.Descriptor instead.
func (PaymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{5}
}

type TicketType int32

const (
	TicketType_TICKET_TYPE_ADULTS TicketType = 0
	TicketType_TICKET_TYPE_CHILD  TicketType = 1
)

// Enum value maps for TicketType.
var (
	TicketType_name = map[int32]string{
		0: "TICKET_TYPE_ADULTS",
		1: "TICKET_TYPE_CHILD",
	}
	TicketType_value = map[string]int32{
		"TICKET_TYPE_ADULTS": 0,
		"TICKET_TYPE_CHILD":  1,
	}
)

func (x TicketType) Enum() *TicketType {
	p := new(TicketType)
	*p = x
	return p
}

func (x TicketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketType) Descriptor() protoreflect.EnumDescriptor {
	return file_affiliate_proto_enumTypes[6].Descriptor()
}

func (TicketType) Type() protoreflect.EnumType {
	return &file_affiliate_proto_enumTypes[6]
}

func (x TicketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketType.Descriptor instead.
func (TicketType) EnumDescriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{6}
}

type RequestMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserToken *string `protobuf:"bytes,1,opt,name=user_token,json=userToken,proto3,oneof" json:"user_token,omitempty"`
}

func (x *RequestMeta) Reset() {
	*x = RequestMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMeta) ProtoMessage() {}

func (x *RequestMeta) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMeta.ProtoReflect.Descriptor instead.
func (*RequestMeta) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{0}
}

func (x *RequestMeta) GetUserToken() string {
	if x != nil && x.UserToken != nil {
		return *x.UserToken
	}
	return ""
}

type ResponseMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode *int64  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,oneof" json:"error_code,omitempty"`
	ErrorMsg  *string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3,oneof" json:"error_msg,omitempty"`
}

func (x *ResponseMeta) Reset() {
	*x = ResponseMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMeta) ProtoMessage() {}

func (x *ResponseMeta) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMeta.ProtoReflect.Descriptor instead.
func (*ResponseMeta) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseMeta) GetErrorCode() int64 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *ResponseMeta) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

type GenericResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
}

func (x *GenericResponse) Reset() {
	*x = GenericResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericResponse) ProtoMessage() {}

func (x *GenericResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericResponse.ProtoReflect.Descriptor instead.
func (*GenericResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{2}
}

func (x *GenericResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

// Direct from user_table
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          *int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	UserName        *string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3,oneof" json:"user_name,omitempty"`
	UserEmail       *string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3,oneof" json:"user_email,omitempty"`
	UserContact     *string `protobuf:"bytes,4,opt,name=user_contact,json=userContact,proto3,oneof" json:"user_contact,omitempty"`
	UserRole        *int64  `protobuf:"varint,5,opt,name=user_role,json=userRole,proto3,oneof" json:"user_role,omitempty"`
	CreateTimestamp *int64  `protobuf:"varint,6,opt,name=create_timestamp,json=createTimestamp,proto3,oneof" json:"create_timestamp,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{3}
}

func (x *User) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *User) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *User) GetUserEmail() string {
	if x != nil && x.UserEmail != nil {
		return *x.UserEmail
	}
	return ""
}

func (x *User) GetUserContact() string {
	if x != nil && x.UserContact != nil {
		return *x.UserContact
	}
	return ""
}

func (x *User) GetUserRole() int64 {
	if x != nil && x.UserRole != nil {
		return *x.UserRole
	}
	return 0
}

func (x *User) GetCreateTimestamp() int64 {
	if x != nil && x.CreateTimestamp != nil {
		return *x.CreateTimestamp
	}
	return 0
}

// Direct from affiliate_details_table
type AffiliateDetailsDb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             *int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	AffiliateType      *int64  `protobuf:"varint,2,opt,name=affiliate_type,json=affiliateType,proto3,oneof" json:"affiliate_type,omitempty"`
	UniqueReferralCode *string `protobuf:"bytes,3,opt,name=unique_referral_code,json=uniqueReferralCode,proto3,oneof" json:"unique_referral_code,omitempty"`
}

func (x *AffiliateDetailsDb) Reset() {
	*x = AffiliateDetailsDb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffiliateDetailsDb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffiliateDetailsDb) ProtoMessage() {}

func (x *AffiliateDetailsDb) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffiliateDetailsDb.ProtoReflect.Descriptor instead.
func (*AffiliateDetailsDb) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{4}
}

func (x *AffiliateDetailsDb) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *AffiliateDetailsDb) GetAffiliateType() int64 {
	if x != nil && x.AffiliateType != nil {
		return *x.AffiliateType
	}
	return 0
}

func (x *AffiliateDetailsDb) GetUniqueReferralCode() string {
	if x != nil && x.UniqueReferralCode != nil {
		return *x.UniqueReferralCode
	}
	return ""
}

// Joining user_table, affiliate_details_table and referral_table
type AffiliateMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             *int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	AffiliateName      *string `protobuf:"bytes,2,opt,name=affiliate_name,json=affiliateName,proto3,oneof" json:"affiliate_name,omitempty"`
	AffiliateType      *int64  `protobuf:"varint,3,opt,name=affiliate_type,json=affiliateType,proto3,oneof" json:"affiliate_type,omitempty"`
	UniqueReferralCode *string `protobuf:"bytes,4,opt,name=unique_referral_code,json=uniqueReferralCode,proto3,oneof" json:"unique_referral_code,omitempty"`
	ReferralCount      *int64  `protobuf:"varint,5,opt,name=referral_count,json=referralCount,proto3,oneof" json:"referral_count,omitempty"`
}

func (x *AffiliateMeta) Reset() {
	*x = AffiliateMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffiliateMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffiliateMeta) ProtoMessage() {}

func (x *AffiliateMeta) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffiliateMeta.ProtoReflect.Descriptor instead.
func (*AffiliateMeta) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{5}
}

func (x *AffiliateMeta) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *AffiliateMeta) GetAffiliateName() string {
	if x != nil && x.AffiliateName != nil {
		return *x.AffiliateName
	}
	return ""
}

func (x *AffiliateMeta) GetAffiliateType() int64 {
	if x != nil && x.AffiliateType != nil {
		return *x.AffiliateType
	}
	return 0
}

func (x *AffiliateMeta) GetUniqueReferralCode() string {
	if x != nil && x.UniqueReferralCode != nil {
		return *x.UniqueReferralCode
	}
	return ""
}

func (x *AffiliateMeta) GetReferralCount() int64 {
	if x != nil && x.ReferralCount != nil {
		return *x.ReferralCount
	}
	return 0
}

// Direct from referral_table
type ReferralDb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferralId         *int64 `protobuf:"varint,1,opt,name=referral_id,json=referralId,proto3,oneof" json:"referral_id,omitempty"`
	AffiliateId        *int64 `protobuf:"varint,2,opt,name=affiliate_id,json=affiliateId,proto3,oneof" json:"affiliate_id,omitempty"`
	ReferralClickTime  *int64 `protobuf:"varint,3,opt,name=referral_click_time,json=referralClickTime,proto3,oneof" json:"referral_click_time,omitempty"`
	ReferralStatus     *int64 `protobuf:"varint,4,opt,name=referral_status,json=referralStatus,proto3,oneof" json:"referral_status,omitempty"`
	BookingId          *int64 `protobuf:"varint,5,opt,name=booking_id,json=bookingId,proto3,oneof" json:"booking_id,omitempty"`
	ReferralCommission *int64 `protobuf:"varint,6,opt,name=referral_commission,json=referralCommission,proto3,oneof" json:"referral_commission,omitempty"`
}

func (x *ReferralDb) Reset() {
	*x = ReferralDb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralDb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralDb) ProtoMessage() {}

func (x *ReferralDb) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralDb.ProtoReflect.Descriptor instead.
func (*ReferralDb) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{6}
}

func (x *ReferralDb) GetReferralId() int64 {
	if x != nil && x.ReferralId != nil {
		return *x.ReferralId
	}
	return 0
}

func (x *ReferralDb) GetAffiliateId() int64 {
	if x != nil && x.AffiliateId != nil {
		return *x.AffiliateId
	}
	return 0
}

func (x *ReferralDb) GetReferralClickTime() int64 {
	if x != nil && x.ReferralClickTime != nil {
		return *x.ReferralClickTime
	}
	return 0
}

func (x *ReferralDb) GetReferralStatus() int64 {
	if x != nil && x.ReferralStatus != nil {
		return *x.ReferralStatus
	}
	return 0
}

func (x *ReferralDb) GetBookingId() int64 {
	if x != nil && x.BookingId != nil {
		return *x.BookingId
	}
	return 0
}

func (x *ReferralDb) GetReferralCommission() int64 {
	if x != nil && x.ReferralCommission != nil {
		return *x.ReferralCommission
	}
	return 0
}

// Join referral_table, booking_details_table
type ReferralDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferralId         *int64          `protobuf:"varint,1,opt,name=referral_id,json=referralId,proto3,oneof" json:"referral_id,omitempty"`
	AffiliateId        *int64          `protobuf:"varint,2,opt,name=affiliate_id,json=affiliateId,proto3,oneof" json:"affiliate_id,omitempty"`
	ReferralClickTime  *int64          `protobuf:"varint,3,opt,name=referral_click_time,json=referralClickTime,proto3,oneof" json:"referral_click_time,omitempty"`
	ReferralStatus     *int64          `protobuf:"varint,4,opt,name=referral_status,json=referralStatus,proto3,oneof" json:"referral_status,omitempty"`
	BookingDetails     *BookingDetails `protobuf:"bytes,5,opt,name=booking_details,json=bookingDetails,proto3,oneof" json:"booking_details,omitempty"` //nil if referral is not successful
	ReferralCommission *int64          `protobuf:"varint,6,opt,name=referral_commission,json=referralCommission,proto3,oneof" json:"referral_commission,omitempty"`
}

func (x *ReferralDetails) Reset() {
	*x = ReferralDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralDetails) ProtoMessage() {}

func (x *ReferralDetails) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralDetails.ProtoReflect.Descriptor instead.
func (*ReferralDetails) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{7}
}

func (x *ReferralDetails) GetReferralId() int64 {
	if x != nil && x.ReferralId != nil {
		return *x.ReferralId
	}
	return 0
}

func (x *ReferralDetails) GetAffiliateId() int64 {
	if x != nil && x.AffiliateId != nil {
		return *x.AffiliateId
	}
	return 0
}

func (x *ReferralDetails) GetReferralClickTime() int64 {
	if x != nil && x.ReferralClickTime != nil {
		return *x.ReferralClickTime
	}
	return 0
}

func (x *ReferralDetails) GetReferralStatus() int64 {
	if x != nil && x.ReferralStatus != nil {
		return *x.ReferralStatus
	}
	return 0
}

func (x *ReferralDetails) GetBookingDetails() *BookingDetails {
	if x != nil {
		return x.BookingDetails
	}
	return nil
}

func (x *ReferralDetails) GetReferralCommission() int64 {
	if x != nil && x.ReferralCommission != nil {
		return *x.ReferralCommission
	}
	return 0
}

type ReferralBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferralId         *int64 `protobuf:"varint,1,opt,name=referral_id,json=referralId,proto3,oneof" json:"referral_id,omitempty"`
	ReferralClickTime  *int64 `protobuf:"varint,3,opt,name=referral_click_time,json=referralClickTime,proto3,oneof" json:"referral_click_time,omitempty"`
	ReferralStatus     *int64 `protobuf:"varint,4,opt,name=referral_status,json=referralStatus,proto3,oneof" json:"referral_status,omitempty"`
	ReferralCommission *int64 `protobuf:"varint,6,opt,name=referral_commission,json=referralCommission,proto3,oneof" json:"referral_commission,omitempty"`
}

func (x *ReferralBasic) Reset() {
	*x = ReferralBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralBasic) ProtoMessage() {}

func (x *ReferralBasic) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralBasic.ProtoReflect.Descriptor instead.
func (*ReferralBasic) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{8}
}

func (x *ReferralBasic) GetReferralId() int64 {
	if x != nil && x.ReferralId != nil {
		return *x.ReferralId
	}
	return 0
}

func (x *ReferralBasic) GetReferralClickTime() int64 {
	if x != nil && x.ReferralClickTime != nil {
		return *x.ReferralClickTime
	}
	return 0
}

func (x *ReferralBasic) GetReferralStatus() int64 {
	if x != nil && x.ReferralStatus != nil {
		return *x.ReferralStatus
	}
	return 0
}

func (x *ReferralBasic) GetReferralCommission() int64 {
	if x != nil && x.ReferralCommission != nil {
		return *x.ReferralCommission
	}
	return 0
}

type CustomerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerName   *string `protobuf:"bytes,1,opt,name=customer_name,json=customerName,proto3,oneof" json:"customer_name,omitempty"`
	CustomerMobile *string `protobuf:"bytes,2,opt,name=customer_mobile,json=customerMobile,proto3,oneof" json:"customer_mobile,omitempty"`
	CustomerEmail  *string `protobuf:"bytes,3,opt,name=customer_email,json=customerEmail,proto3,oneof" json:"customer_email,omitempty"`
	TicketType     *int64  `protobuf:"varint,4,opt,name=ticket_type,json=ticketType,proto3,oneof" json:"ticket_type,omitempty"`
	TicketPrice    *int64  `protobuf:"varint,5,opt,name=ticket_price,json=ticketPrice,proto3,oneof" json:"ticket_price,omitempty"`
}

func (x *CustomerInfo) Reset() {
	*x = CustomerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerInfo) ProtoMessage() {}

func (x *CustomerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerInfo.ProtoReflect.Descriptor instead.
func (*CustomerInfo) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{9}
}

func (x *CustomerInfo) GetCustomerName() string {
	if x != nil && x.CustomerName != nil {
		return *x.CustomerName
	}
	return ""
}

func (x *CustomerInfo) GetCustomerMobile() string {
	if x != nil && x.CustomerMobile != nil {
		return *x.CustomerMobile
	}
	return ""
}

func (x *CustomerInfo) GetCustomerEmail() string {
	if x != nil && x.CustomerEmail != nil {
		return *x.CustomerEmail
	}
	return ""
}

func (x *CustomerInfo) GetTicketType() int64 {
	if x != nil && x.TicketType != nil {
		return *x.TicketType
	}
	return 0
}

func (x *CustomerInfo) GetTicketPrice() int64 {
	if x != nil && x.TicketPrice != nil {
		return *x.TicketPrice
	}
	return 0
}

// Direct from booking_details_table
type BookingDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingId        *int64          `protobuf:"varint,1,opt,name=booking_id,json=bookingId,proto3,oneof" json:"booking_id,omitempty"`
	BookingStatus    *int64          `protobuf:"varint,2,opt,name=booking_status,json=bookingStatus,proto3,oneof" json:"booking_status,omitempty"`
	BookingDay       *string         `protobuf:"bytes,3,opt,name=booking_day,json=bookingDay,proto3,oneof" json:"booking_day,omitempty"`
	BookingSlot      *int64          `protobuf:"varint,4,opt,name=booking_slot,json=bookingSlot,proto3,oneof" json:"booking_slot,omitempty"`
	TransactionTime  *int64          `protobuf:"varint,5,opt,name=transaction_time,json=transactionTime,proto3,oneof" json:"transaction_time,omitempty"`
	PaymentStatus    *int64          `protobuf:"varint,6,opt,name=payment_status,json=paymentStatus,proto3,oneof" json:"payment_status,omitempty"`
	AdultTicketCount *int64          `protobuf:"varint,7,opt,name=adult_ticket_count,json=adultTicketCount,proto3,oneof" json:"adult_ticket_count,omitempty"`
	ChildTicketCount *int64          `protobuf:"varint,8,opt,name=child_ticket_count,json=childTicketCount,proto3,oneof" json:"child_ticket_count,omitempty"`
	AdultTicketTotal *int64          `protobuf:"varint,9,opt,name=adult_ticket_total,json=adultTicketTotal,proto3,oneof" json:"adult_ticket_total,omitempty"`
	ChildTicketTotal *int64          `protobuf:"varint,10,opt,name=child_ticket_total,json=childTicketTotal,proto3,oneof" json:"child_ticket_total,omitempty"`
	CustomerInfo     []*CustomerInfo `protobuf:"bytes,11,rep,name=customer_info,json=customerInfo,proto3" json:"customer_info,omitempty"`
}

func (x *BookingDetails) Reset() {
	*x = BookingDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingDetails) ProtoMessage() {}

func (x *BookingDetails) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingDetails.ProtoReflect.Descriptor instead.
func (*BookingDetails) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{10}
}

func (x *BookingDetails) GetBookingId() int64 {
	if x != nil && x.BookingId != nil {
		return *x.BookingId
	}
	return 0
}

func (x *BookingDetails) GetBookingStatus() int64 {
	if x != nil && x.BookingStatus != nil {
		return *x.BookingStatus
	}
	return 0
}

func (x *BookingDetails) GetBookingDay() string {
	if x != nil && x.BookingDay != nil {
		return *x.BookingDay
	}
	return ""
}

func (x *BookingDetails) GetBookingSlot() int64 {
	if x != nil && x.BookingSlot != nil {
		return *x.BookingSlot
	}
	return 0
}

func (x *BookingDetails) GetTransactionTime() int64 {
	if x != nil && x.TransactionTime != nil {
		return *x.TransactionTime
	}
	return 0
}

func (x *BookingDetails) GetPaymentStatus() int64 {
	if x != nil && x.PaymentStatus != nil {
		return *x.PaymentStatus
	}
	return 0
}

func (x *BookingDetails) GetAdultTicketCount() int64 {
	if x != nil && x.AdultTicketCount != nil {
		return *x.AdultTicketCount
	}
	return 0
}

func (x *BookingDetails) GetChildTicketCount() int64 {
	if x != nil && x.ChildTicketCount != nil {
		return *x.ChildTicketCount
	}
	return 0
}

func (x *BookingDetails) GetAdultTicketTotal() int64 {
	if x != nil && x.AdultTicketTotal != nil {
		return *x.AdultTicketTotal
	}
	return 0
}

func (x *BookingDetails) GetChildTicketTotal() int64 {
	if x != nil && x.ChildTicketTotal != nil {
		return *x.ChildTicketTotal
	}
	return 0
}

func (x *BookingDetails) GetCustomerInfo() []*CustomerInfo {
	if x != nil {
		return x.CustomerInfo
	}
	return nil
}

// Admin to view all affiliate stats
type GetAffiliateStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
}

func (x *GetAffiliateStatsRequest) Reset() {
	*x = GetAffiliateStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAffiliateStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffiliateStatsRequest) ProtoMessage() {}

func (x *GetAffiliateStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffiliateStatsRequest.ProtoReflect.Descriptor instead.
func (*GetAffiliateStatsRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{11}
}

func (x *GetAffiliateStatsRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

// Also get time stats based on datepicker start end timestamp
type GetAffiliateStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta                  *ResponseMeta `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	TotalMonthlyAffiliateRevenue  *int64        `protobuf:"varint,2,opt,name=total_monthly_affiliate_revenue,json=totalMonthlyAffiliateRevenue,proto3,oneof" json:"total_monthly_affiliate_revenue,omitempty"`    //From referral_table join booking_table, SUM(adult_ticket_total,child_ticket_total)
	TotalMonthlyCommission        *int64        `protobuf:"varint,3,opt,name=total_monthly_commission,json=totalMonthlyCommission,proto3,oneof" json:"total_monthly_commission,omitempty"`                        //SUM(referral_commission)
	TotalMonthlyActiveAffiliates  *int64        `protobuf:"varint,4,opt,name=total_monthly_active_affiliates,json=totalMonthlyActiveAffiliates,proto3,oneof" json:"total_monthly_active_affiliates,omitempty"`    //COUNT(affiliate_id)
	TotalMonthlyAffiliateBookings *int64        `protobuf:"varint,5,opt,name=total_monthly_affiliate_bookings,json=totalMonthlyAffiliateBookings,proto3,oneof" json:"total_monthly_affiliate_bookings,omitempty"` //COUNT(referral_id)
	MonthlyTopAffiliates          []int64       `protobuf:"varint,6,rep,packed,name=monthly_top_affiliates,json=monthlyTopAffiliates,proto3" json:"monthly_top_affiliates,omitempty"`                             //By referral count, COUNT(referral_id) GROUP BY affiliate_id ORDER BY COUNT(referral_id) DESC LIMIT 5
	MonthlyTopCommission          []int64       `protobuf:"varint,7,rep,packed,name=monthly_top_commission,json=monthlyTopCommission,proto3" json:"monthly_top_commission,omitempty"`                             //By total commission, SUM(referral_commission) GROUP BY affiliate_id ORDER BY SUM(referral_commission) DESC LIMIT 5
}

func (x *GetAffiliateStatsResponse) Reset() {
	*x = GetAffiliateStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAffiliateStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffiliateStatsResponse) ProtoMessage() {}

func (x *GetAffiliateStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffiliateStatsResponse.ProtoReflect.Descriptor instead.
func (*GetAffiliateStatsResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{12}
}

func (x *GetAffiliateStatsResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetAffiliateStatsResponse) GetTotalMonthlyAffiliateRevenue() int64 {
	if x != nil && x.TotalMonthlyAffiliateRevenue != nil {
		return *x.TotalMonthlyAffiliateRevenue
	}
	return 0
}

func (x *GetAffiliateStatsResponse) GetTotalMonthlyCommission() int64 {
	if x != nil && x.TotalMonthlyCommission != nil {
		return *x.TotalMonthlyCommission
	}
	return 0
}

func (x *GetAffiliateStatsResponse) GetTotalMonthlyActiveAffiliates() int64 {
	if x != nil && x.TotalMonthlyActiveAffiliates != nil {
		return *x.TotalMonthlyActiveAffiliates
	}
	return 0
}

func (x *GetAffiliateStatsResponse) GetTotalMonthlyAffiliateBookings() int64 {
	if x != nil && x.TotalMonthlyAffiliateBookings != nil {
		return *x.TotalMonthlyAffiliateBookings
	}
	return 0
}

func (x *GetAffiliateStatsResponse) GetMonthlyTopAffiliates() []int64 {
	if x != nil {
		return x.MonthlyTopAffiliates
	}
	return nil
}

func (x *GetAffiliateStatsResponse) GetMonthlyTopCommission() []int64 {
	if x != nil {
		return x.MonthlyTopCommission
	}
	return nil
}

// Admin to view all affiliates
type GetAffiliateListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
}

func (x *GetAffiliateListRequest) Reset() {
	*x = GetAffiliateListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAffiliateListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffiliateListRequest) ProtoMessage() {}

func (x *GetAffiliateListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffiliateListRequest.ProtoReflect.Descriptor instead.
func (*GetAffiliateListRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{13}
}

func (x *GetAffiliateListRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

type GetAffiliateListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta  *ResponseMeta    `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	AffiliateList []*AffiliateMeta `protobuf:"bytes,2,rep,name=affiliate_list,json=affiliateList,proto3" json:"affiliate_list,omitempty"`
}

func (x *GetAffiliateListResponse) Reset() {
	*x = GetAffiliateListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAffiliateListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffiliateListResponse) ProtoMessage() {}

func (x *GetAffiliateListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffiliateListResponse.ProtoReflect.Descriptor instead.
func (*GetAffiliateListResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{14}
}

func (x *GetAffiliateListResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetAffiliateListResponse) GetAffiliateList() []*AffiliateMeta {
	if x != nil {
		return x.AffiliateList
	}
	return nil
}

// Admin to view individual affiliate details with list of referrals
type GetAffiliateDetailsByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	AffiliateId *int64       `protobuf:"varint,2,opt,name=affiliate_id,json=affiliateId,proto3,oneof" json:"affiliate_id,omitempty"`
}

func (x *GetAffiliateDetailsByIdRequest) Reset() {
	*x = GetAffiliateDetailsByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAffiliateDetailsByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffiliateDetailsByIdRequest) ProtoMessage() {}

func (x *GetAffiliateDetailsByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffiliateDetailsByIdRequest.ProtoReflect.Descriptor instead.
func (*GetAffiliateDetailsByIdRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{15}
}

func (x *GetAffiliateDetailsByIdRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *GetAffiliateDetailsByIdRequest) GetAffiliateId() int64 {
	if x != nil && x.AffiliateId != nil {
		return *x.AffiliateId
	}
	return 0
}

type GetAffiliateDetailsByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta  *ResponseMeta      `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	AffiliateMeta *AffiliateMeta     `protobuf:"bytes,2,opt,name=affiliate_meta,json=affiliateMeta,proto3,oneof" json:"affiliate_meta,omitempty"`
	ReferralList  []*ReferralDetails `protobuf:"bytes,3,rep,name=referral_list,json=referralList,proto3" json:"referral_list,omitempty"`
}

func (x *GetAffiliateDetailsByIdResponse) Reset() {
	*x = GetAffiliateDetailsByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAffiliateDetailsByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffiliateDetailsByIdResponse) ProtoMessage() {}

func (x *GetAffiliateDetailsByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffiliateDetailsByIdResponse.ProtoReflect.Descriptor instead.
func (*GetAffiliateDetailsByIdResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{16}
}

func (x *GetAffiliateDetailsByIdResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetAffiliateDetailsByIdResponse) GetAffiliateMeta() *AffiliateMeta {
	if x != nil {
		return x.AffiliateMeta
	}
	return nil
}

func (x *GetAffiliateDetailsByIdResponse) GetReferralList() []*ReferralDetails {
	if x != nil {
		return x.ReferralList
	}
	return nil
}

// Affiliates to view their referral stats
type GetReferralStatsByAffiliateIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	AffiliateId *int64       `protobuf:"varint,2,opt,name=affiliate_id,json=affiliateId,proto3,oneof" json:"affiliate_id,omitempty"`
}

func (x *GetReferralStatsByAffiliateIdRequest) Reset() {
	*x = GetReferralStatsByAffiliateIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralStatsByAffiliateIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralStatsByAffiliateIdRequest) ProtoMessage() {}

func (x *GetReferralStatsByAffiliateIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralStatsByAffiliateIdRequest.ProtoReflect.Descriptor instead.
func (*GetReferralStatsByAffiliateIdRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{17}
}

func (x *GetReferralStatsByAffiliateIdRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *GetReferralStatsByAffiliateIdRequest) GetAffiliateId() int64 {
	if x != nil && x.AffiliateId != nil {
		return *x.AffiliateId
	}
	return 0
}

type GetReferralStatsByAffiliateIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
}

func (x *GetReferralStatsByAffiliateIdResponse) Reset() {
	*x = GetReferralStatsByAffiliateIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralStatsByAffiliateIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralStatsByAffiliateIdResponse) ProtoMessage() {}

func (x *GetReferralStatsByAffiliateIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralStatsByAffiliateIdResponse.ProtoReflect.Descriptor instead.
func (*GetReferralStatsByAffiliateIdResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{18}
}

func (x *GetReferralStatsByAffiliateIdResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

// Affiliates to view list of their referrals
type GetReferralListByAffiliateIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	AffiliateId *int64       `protobuf:"varint,2,opt,name=affiliate_id,json=affiliateId,proto3,oneof" json:"affiliate_id,omitempty"`
}

func (x *GetReferralListByAffiliateIdRequest) Reset() {
	*x = GetReferralListByAffiliateIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralListByAffiliateIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralListByAffiliateIdRequest) ProtoMessage() {}

func (x *GetReferralListByAffiliateIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralListByAffiliateIdRequest.ProtoReflect.Descriptor instead.
func (*GetReferralListByAffiliateIdRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{19}
}

func (x *GetReferralListByAffiliateIdRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *GetReferralListByAffiliateIdRequest) GetAffiliateId() int64 {
	if x != nil && x.AffiliateId != nil {
		return *x.AffiliateId
	}
	return 0
}

type GetReferralListByAffiliateIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta    `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	ReferralList []*ReferralBasic `protobuf:"bytes,2,rep,name=referral_list,json=referralList,proto3" json:"referral_list,omitempty"`
}

func (x *GetReferralListByAffiliateIdResponse) Reset() {
	*x = GetReferralListByAffiliateIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralListByAffiliateIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralListByAffiliateIdResponse) ProtoMessage() {}

func (x *GetReferralListByAffiliateIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralListByAffiliateIdResponse.ProtoReflect.Descriptor instead.
func (*GetReferralListByAffiliateIdResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{20}
}

func (x *GetReferralListByAffiliateIdResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetReferralListByAffiliateIdResponse) GetReferralList() []*ReferralBasic {
	if x != nil {
		return x.ReferralList
	}
	return nil
}

// Admin, Affiliates to view details of referrals
type GetReferralDetailsByReferralIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"` //blocks if user id requesting does not own this referral / not admin
	ReferralId  *int64       `protobuf:"varint,2,opt,name=referral_id,json=referralId,proto3,oneof" json:"referral_id,omitempty"`
}

func (x *GetReferralDetailsByReferralIdRequest) Reset() {
	*x = GetReferralDetailsByReferralIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralDetailsByReferralIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralDetailsByReferralIdRequest) ProtoMessage() {}

func (x *GetReferralDetailsByReferralIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralDetailsByReferralIdRequest.ProtoReflect.Descriptor instead.
func (*GetReferralDetailsByReferralIdRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{21}
}

func (x *GetReferralDetailsByReferralIdRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *GetReferralDetailsByReferralIdRequest) GetReferralId() int64 {
	if x != nil && x.ReferralId != nil {
		return *x.ReferralId
	}
	return 0
}

type GetReferralDetailsByReferralIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta    *ResponseMeta    `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	ReferralDetails *ReferralDetails `protobuf:"bytes,2,opt,name=referral_details,json=referralDetails,proto3,oneof" json:"referral_details,omitempty"`
}

func (x *GetReferralDetailsByReferralIdResponse) Reset() {
	*x = GetReferralDetailsByReferralIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralDetailsByReferralIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralDetailsByReferralIdResponse) ProtoMessage() {}

func (x *GetReferralDetailsByReferralIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralDetailsByReferralIdResponse.ProtoReflect.Descriptor instead.
func (*GetReferralDetailsByReferralIdResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{22}
}

func (x *GetReferralDetailsByReferralIdResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetReferralDetailsByReferralIdResponse) GetReferralDetails() *ReferralDetails {
	if x != nil {
		return x.ReferralDetails
	}
	return nil
}

type BookingSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot      *int64 `protobuf:"varint,1,opt,name=slot,proto3,oneof" json:"slot,omitempty"`
	AdultSlot *int64 `protobuf:"varint,2,opt,name=adult_slot,json=adultSlot,proto3,oneof" json:"adult_slot,omitempty"`
	ChildSlot *int64 `protobuf:"varint,3,opt,name=child_slot,json=childSlot,proto3,oneof" json:"child_slot,omitempty"`
}

func (x *BookingSlot) Reset() {
	*x = BookingSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingSlot) ProtoMessage() {}

func (x *BookingSlot) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingSlot.ProtoReflect.Descriptor instead.
func (*BookingSlot) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{23}
}

func (x *BookingSlot) GetSlot() int64 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *BookingSlot) GetAdultSlot() int64 {
	if x != nil && x.AdultSlot != nil {
		return *x.AdultSlot
	}
	return 0
}

func (x *BookingSlot) GetChildSlot() int64 {
	if x != nil && x.ChildSlot != nil {
		return *x.ChildSlot
	}
	return 0
}

type BookingDates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date  *string      `protobuf:"bytes,1,opt,name=date,proto3,oneof" json:"date,omitempty"`
	Slots *BookingSlot `protobuf:"bytes,2,opt,name=slots,proto3,oneof" json:"slots,omitempty"`
}

func (x *BookingDates) Reset() {
	*x = BookingDates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingDates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingDates) ProtoMessage() {}

func (x *BookingDates) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingDates.ProtoReflect.Descriptor instead.
func (*BookingDates) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{24}
}

func (x *BookingDates) GetDate() string {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return ""
}

func (x *BookingDates) GetSlots() *BookingSlot {
	if x != nil {
		return x.Slots
	}
	return nil
}

// Landing page to get available time slot based on date
type GetAvailableSlotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta  `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	Date         *string        `protobuf:"bytes,2,opt,name=date,proto3,oneof" json:"date,omitempty"`
	BookingSlots []*BookingSlot `protobuf:"bytes,3,rep,name=booking_slots,json=bookingSlots,proto3" json:"booking_slots,omitempty"`
}

func (x *GetAvailableSlotResponse) Reset() {
	*x = GetAvailableSlotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableSlotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableSlotResponse) ProtoMessage() {}

func (x *GetAvailableSlotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableSlotResponse.ProtoReflect.Descriptor instead.
func (*GetAvailableSlotResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{25}
}

func (x *GetAvailableSlotResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetAvailableSlotResponse) GetDate() string {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return ""
}

func (x *GetAvailableSlotResponse) GetBookingSlots() []*BookingSlot {
	if x != nil {
		return x.BookingSlots
	}
	return nil
}

var File_affiliate_proto protoreflect.FileDescriptor

var file_affiliate_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x22,
	0x40, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x22,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x71, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x73, 0x67, 0x22, 0x69, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22,
	0xc1, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x05, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xcd, 0x01, 0x0a, 0x12, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x62, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x12, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x0d, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x12, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0d, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8b, 0x03, 0x0a,
	0x0a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x44, 0x62, 0x12, 0x24, 0x0a, 0x0b, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x04, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52,
	0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x03, 0x0a, 0x0f, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24,
	0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x66,
	0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x11, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0e, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x4a, 0x0a, 0x0f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x04, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x12, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x02, 0x0a, 0x0d, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x24, 0x0a, 0x0b,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x01, 0x52, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x03, 0x52, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xba, 0x02, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xde, 0x05, 0x0a,
	0x0e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x22, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0d, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0b, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x64, 0x75,
	0x6c, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x10, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x10, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x10, 0x61,
	0x64, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09,
	0x52, 0x10, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x6e, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x8e, 0x05,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01,
	0x01, 0x12, 0x4a, 0x0a, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x1c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x02, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x1f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x20, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x04, 0x52, 0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54,
	0x6f, 0x70, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x73, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x6d,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xb6, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x42, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xad, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x66,
	0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x99, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x66,
	0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x47, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x01, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x22, 0xb3, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x41, 0x66,
	0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xb2, 0x01, 0x0a, 0x23, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x41,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x66,
	0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xc0,
	0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a,
	0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x22, 0xb1, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48,
	0x01, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x95, 0x01, 0x0a,
	0x0b, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x61, 0x64, 0x75,
	0x6c, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52,
	0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x22, 0x70, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x48, 0x01, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x2a, 0x5f, 0x0a,
	0x0f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xe8, 0x07, 0x12, 0x19,
	0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0xea, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0xeb, 0x07, 0x2a, 0x3c,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x41, 0x46, 0x46, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x10, 0x02, 0x2a, 0x52, 0x0a, 0x0d,
	0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x1c, 0x41, 0x46, 0x46, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x41, 0x46, 0x46, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x48, 0x41, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x2a, 0x85, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x80, 0x01, 0x0a, 0x0d, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4f,
	0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a,
	0x18, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x7f, 0x0a, 0x0d, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x3b, 0x0a, 0x0a,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x49,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x55, 0x4c, 0x54, 0x53,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x10, 0x01, 0x42, 0x0c, 0x5a, 0x0a, 0x2f, 0x61, 0x66,
	0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_affiliate_proto_rawDescOnce sync.Once
	file_affiliate_proto_rawDescData = file_affiliate_proto_rawDesc
)

func file_affiliate_proto_rawDescGZIP() []byte {
	file_affiliate_proto_rawDescOnce.Do(func() {
		file_affiliate_proto_rawDescData = protoimpl.X.CompressGZIP(file_affiliate_proto_rawDescData)
	})
	return file_affiliate_proto_rawDescData
}

var file_affiliate_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_affiliate_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_affiliate_proto_goTypes = []interface{}{
	(GlobalErrorCode)(0),                           // 0: affiliate.pb.GlobalErrorCode
	(UserRole)(0),                                  // 1: affiliate.pb.UserRole
	(AffiliateType)(0),                             // 2: affiliate.pb.AffiliateType
	(ReferralStatus)(0),                            // 3: affiliate.pb.ReferralStatus
	(BookingStatus)(0),                             // 4: affiliate.pb.BookingStatus
	(PaymentStatus)(0),                             // 5: affiliate.pb.PaymentStatus
	(TicketType)(0),                                // 6: affiliate.pb.TicketType
	(*RequestMeta)(nil),                            // 7: affiliate.pb.RequestMeta
	(*ResponseMeta)(nil),                           // 8: affiliate.pb.ResponseMeta
	(*GenericResponse)(nil),                        // 9: affiliate.pb.GenericResponse
	(*User)(nil),                                   // 10: affiliate.pb.User
	(*AffiliateDetailsDb)(nil),                     // 11: affiliate.pb.AffiliateDetailsDb
	(*AffiliateMeta)(nil),                          // 12: affiliate.pb.AffiliateMeta
	(*ReferralDb)(nil),                             // 13: affiliate.pb.ReferralDb
	(*ReferralDetails)(nil),                        // 14: affiliate.pb.ReferralDetails
	(*ReferralBasic)(nil),                          // 15: affiliate.pb.ReferralBasic
	(*CustomerInfo)(nil),                           // 16: affiliate.pb.CustomerInfo
	(*BookingDetails)(nil),                         // 17: affiliate.pb.BookingDetails
	(*GetAffiliateStatsRequest)(nil),               // 18: affiliate.pb.GetAffiliateStatsRequest
	(*GetAffiliateStatsResponse)(nil),              // 19: affiliate.pb.GetAffiliateStatsResponse
	(*GetAffiliateListRequest)(nil),                // 20: affiliate.pb.GetAffiliateListRequest
	(*GetAffiliateListResponse)(nil),               // 21: affiliate.pb.GetAffiliateListResponse
	(*GetAffiliateDetailsByIdRequest)(nil),         // 22: affiliate.pb.GetAffiliateDetailsByIdRequest
	(*GetAffiliateDetailsByIdResponse)(nil),        // 23: affiliate.pb.GetAffiliateDetailsByIdResponse
	(*GetReferralStatsByAffiliateIdRequest)(nil),   // 24: affiliate.pb.GetReferralStatsByAffiliateIdRequest
	(*GetReferralStatsByAffiliateIdResponse)(nil),  // 25: affiliate.pb.GetReferralStatsByAffiliateIdResponse
	(*GetReferralListByAffiliateIdRequest)(nil),    // 26: affiliate.pb.GetReferralListByAffiliateIdRequest
	(*GetReferralListByAffiliateIdResponse)(nil),   // 27: affiliate.pb.GetReferralListByAffiliateIdResponse
	(*GetReferralDetailsByReferralIdRequest)(nil),  // 28: affiliate.pb.GetReferralDetailsByReferralIdRequest
	(*GetReferralDetailsByReferralIdResponse)(nil), // 29: affiliate.pb.GetReferralDetailsByReferralIdResponse
	(*BookingSlot)(nil),                            // 30: affiliate.pb.BookingSlot
	(*BookingDates)(nil),                           // 31: affiliate.pb.BookingDates
	(*GetAvailableSlotResponse)(nil),               // 32: affiliate.pb.GetAvailableSlotResponse
}
var file_affiliate_proto_depIdxs = []int32{
	8,  // 0: affiliate.pb.GenericResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	17, // 1: affiliate.pb.ReferralDetails.booking_details:type_name -> affiliate.pb.BookingDetails
	16, // 2: affiliate.pb.BookingDetails.customer_info:type_name -> affiliate.pb.CustomerInfo
	7,  // 3: affiliate.pb.GetAffiliateStatsRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	8,  // 4: affiliate.pb.GetAffiliateStatsResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	7,  // 5: affiliate.pb.GetAffiliateListRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	8,  // 6: affiliate.pb.GetAffiliateListResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	12, // 7: affiliate.pb.GetAffiliateListResponse.affiliate_list:type_name -> affiliate.pb.AffiliateMeta
	7,  // 8: affiliate.pb.GetAffiliateDetailsByIdRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	8,  // 9: affiliate.pb.GetAffiliateDetailsByIdResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	12, // 10: affiliate.pb.GetAffiliateDetailsByIdResponse.affiliate_meta:type_name -> affiliate.pb.AffiliateMeta
	14, // 11: affiliate.pb.GetAffiliateDetailsByIdResponse.referral_list:type_name -> affiliate.pb.ReferralDetails
	7,  // 12: affiliate.pb.GetReferralStatsByAffiliateIdRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	8,  // 13: affiliate.pb.GetReferralStatsByAffiliateIdResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	7,  // 14: affiliate.pb.GetReferralListByAffiliateIdRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	8,  // 15: affiliate.pb.GetReferralListByAffiliateIdResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	15, // 16: affiliate.pb.GetReferralListByAffiliateIdResponse.referral_list:type_name -> affiliate.pb.ReferralBasic
	7,  // 17: affiliate.pb.GetReferralDetailsByReferralIdRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	8,  // 18: affiliate.pb.GetReferralDetailsByReferralIdResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	14, // 19: affiliate.pb.GetReferralDetailsByReferralIdResponse.referral_details:type_name -> affiliate.pb.ReferralDetails
	30, // 20: affiliate.pb.BookingDates.slots:type_name -> affiliate.pb.BookingSlot
	8,  // 21: affiliate.pb.GetAvailableSlotResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	30, // 22: affiliate.pb.GetAvailableSlotResponse.booking_slots:type_name -> affiliate.pb.BookingSlot
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_affiliate_proto_init() }
func file_affiliate_proto_init() {
	if File_affiliate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_affiliate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffiliateDetailsDb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffiliateMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralDb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAffiliateStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAffiliateStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAffiliateListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAffiliateListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAffiliateDetailsByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAffiliateDetailsByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralStatsByAffiliateIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralStatsByAffiliateIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralListByAffiliateIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralListByAffiliateIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralDetailsByReferralIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralDetailsByReferralIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingDates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableSlotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_affiliate_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[25].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_affiliate_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_affiliate_proto_goTypes,
		DependencyIndexes: file_affiliate_proto_depIdxs,
		EnumInfos:         file_affiliate_proto_enumTypes,
		MessageInfos:      file_affiliate_proto_msgTypes,
	}.Build()
	File_affiliate_proto = out.File
	file_affiliate_proto_rawDesc = nil
	file_affiliate_proto_goTypes = nil
	file_affiliate_proto_depIdxs = nil
}
